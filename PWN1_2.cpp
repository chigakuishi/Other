/* This is the solution for Gather seeds, give keys, unlock security(2)*/

/* This file is generated by BUSMASTER */
/* VERSION [1.1] */
/* BUSMASTER VERSION [1.7.0] */
/* PROTOCOL [CAN] */
/* Start BUSMASTER include header */
#include <Windows.h>
#include <CANIncludes.h>
#include <stdio.h>
#include <stdlib.h>
/* End BUSMASTER include header */
/* Start BUSMASTER global variable */
/* End BUSMASTER global variable */
/* Start BUSMASTER Function Prototype */
GCC_EXTERN void GCC_EXPORT OnMsg_All(STCAN_MSG RxMsg);
GCC_EXTERN void GCC_EXPORT OnError_Warning_Limit(SCAN_ERR ErrorMsg);
GCC_EXTERN void GCC_EXPORT OnDLL_Load();
GCC_EXTERN void GCC_EXPORT OnDLL_Unload();
GCC_EXTERN void GCC_EXPORT OnBus_Connect();
GCC_EXTERN void GCC_EXPORT OnBus_Disconnect();
GCC_EXTERN void GCC_EXPORT OnMsgID_7F0(STCAN_MSG RxMsg);
GCC_EXTERN void GCC_EXPORT OnTimer_timeout_5000( );
/* End BUSMASTER Function Prototype */


int seed = 0xFEEDBEEF;
int key=0;
STCAN_MSG TxMsg;


/* Start BUSMASTER generated function - OnMsg_All */
void OnBus_Connect()
{
	Trace("[Challenge designed by ETAS]");
	Trace("Bus connected");
	timeout_flag=0;
	TxMsg.m_unMsgID = 0x7F0; 
	TxMsg.m_ucEXTENDED = FALSE;
	TxMsg.m_ucRTR = FALSE;
	TxMsg.m_ucDLC = 8;
	TxMsg.m_ucChannel = 1;
	
	TxMsg.m_sWhichBit.m_aucData[0] = 0x02;
	TxMsg.m_sWhichBit.m_aucData[1] = 0x27;
	TxMsg.m_sWhichBit.m_aucData[2] = 0x01;
	TxMsg.m_sWhichBit.m_aucData[3] = 0x00;
	TxMsg.m_sWhichBit.m_aucData[4] = 0x00;
	TxMsg.m_sWhichBit.m_aucData[5] = 0x00;
	TxMsg.m_sWhichBit.m_aucData[6] = 0x00;
	TxMsg.m_sWhichBit.m_aucData[7] = 0x00;
	
	
	sendMsg(TxMsg);
		
}

void OnMsgID_7F0(STCAN_MSG RxMsg)
{
	if(RxMsg.m_ucDLC != 8){
		return;
	}

	if(RxMsg.m_sWhichBit.m_aucData[0]==0x02 && RxMsg.m_sWhichBit.m_aucData[1]==0x27 && RxMsg.m_sWhichBit.m_aucData[2]==0x01 ){
		
		key = (RxMsg.m_sWhichBit.m_aucData[3]*0x100)+(RxMsg.m_sWhichBit.m_aucData[4]);
		key = (key^0x0550);
		int key_1 = key>&1;
		int key_2 = (key>>1)&1;
		int key_3 = (key>>2)&1;
		int key_4 = (key>>3)&1;
		
		TxMsg.m_sWhichBit.m_aucData[0] = 0x04;
		TxMsg.m_sWhichBit.m_aucData[1] = 0x27;
		TxMsg.m_sWhichBit.m_aucData[2] = 0x02;
		TxMsg.m_sWhichBit.m_aucData[3] = (key_4*0x100) + key_3;
		TxMsg.m_sWhichBit.m_aucData[4] = (key_2*0x100) + key_1;
		TxMsg.m_sWhichBit.m_aucData[5] = 0x00;
		TxMsg.m_sWhichBit.m_aucData[6] = 0x00;
		TxMsg.m_sWhichBit.m_aucData[7] = 0x00;
		
	}
}		











