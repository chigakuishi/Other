/* This file is generated by BUSMASTER */
/* VERSION [1.1] */
/* BUSMASTER VERSION [1.7.0] */
/* PROTOCOL [CAN] */
/* Start BUSMASTER include header */
#include <Windows.h>
#include <CANIncludes.h>
#include <stdio.h>
#include <stdlib.h>
/* End BUSMASTER include header */
/* Start BUSMASTER global variable */
/* End BUSMASTER global variable */
/* Start BUSMASTER Function Prototype */
GCC_EXTERN void GCC_EXPORT OnMsg_All(STCAN_MSG RxMsg);
GCC_EXTERN void GCC_EXPORT OnError_Warning_Limit(SCAN_ERR ErrorMsg);
GCC_EXTERN void GCC_EXPORT OnDLL_Load();
GCC_EXTERN void GCC_EXPORT OnDLL_Unload();
GCC_EXTERN void GCC_EXPORT OnBus_Connect();
GCC_EXTERN void GCC_EXPORT OnBus_Disconnect();
GCC_EXTERN void GCC_EXPORT OnTimer_start_programming_50( );
GCC_EXTERN void GCC_EXPORT OnMsgID_7E0(STCAN_MSG RxMsg);
/* End BUSMASTER Function Prototype */

char time_out=0;
char sent_flag=0;
int step_counter=0;
STCAN_MSG TxMsg;
int ctr=0;
int a=0; //dummy variable
int lock=0;

/* Start BUSMASTER generated function - OnMsg_All */
void OnMsg_All(STCAN_MSG RxMsg)
{
	
}/* End BUSMASTER generated function - OnMsg_All */


/* Start BUSMASTER generated function - OnTimer_start_programming_50 */
void OnTimer_start_programming_50()
{
	if(ctr>0){
		Trace("ctr: %d",ctr);
		ctr--;
		if(ctr==0){
			lock=0;
			SendMsg(TxMsg);
		}
		return;
	}
	
	if(time_out==1){
			
	}else if(sent_flag>2){
		//if there is a timeout of more than 50ms, then the diagnostic session is aborted
		time_out=1;
		Trace("Timeout");
	}else if(sent_flag>=1){
		//Response timeout - programming session aborted
		sent_flag++;
	}
	else {
		
	}
	
}/* End BUSMASTER generated function - OnTimer_start_programming_50 */


/* Start BUSMASTER generated function - OnError_Warning_Limit */
void OnError_Warning_Limit(SCAN_ERR ErrorMsg)
{
	Trace("Warning Limit reached");
}/* End BUSMASTER generated function - OnError_Warning_Limit */
/* Start BUSMASTER generated function - OnDLL_Load */
void OnDLL_Load()
{
	EnableLogging();
}/* End BUSMASTER generated function - OnDLL_Load */
/* Start BUSMASTER generated function - OnDLL_Unload */
void OnDLL_Unload()
{
	DisableLogging();
}/* End BUSMASTER generated function - OnDLL_Unload */



/* Start BUSMASTER generated function - OnBus_Connect */
void OnBus_Connect()
{
	Trace("[Challenge designed by ETAS]");
	Trace("Bus connected");
	time_out=0;
	sent_flag=0;
	step_counter=0;
	lock=0;
	TxMsg.m_unMsgID = 0x7E8; 
	TxMsg.m_ucEXTENDED = FALSE;
	TxMsg.m_ucRTR = FALSE;
	TxMsg.m_ucDLC = 8;
	TxMsg.m_ucChannel = 1;
	
}/* End BUSMASTER generated function - OnBus_Connect */
/* Start BUSMASTER generated function - OnBus_Disconnect */
void OnBus_Disconnect()
{
	Trace("Bus Disconnected");
}/* End BUSMASTER generated function - OnBus_Disconnect */



/* Start BUSMASTER generated function - OnMsgID_7E0 */
void OnMsgID_7E0(STCAN_MSG RxMsg)
{
	if(lock==1){
		Trace("too fast !");
		return;
	}
	if(time_out==1)return;
	
	switch(step_counter){
		case 0:
			
			//check message
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x02) || (RxMsg.m_sWhichBit.m_aucData[1]!=0x10) || (RxMsg.m_sWhichBit.m_aucData[2]!=0x03)){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
				return
			)
			sent_flag==0;
			ctr=0;
			
			//positive response
			TxMsg.m_sWhichBit.m_aucData[0] = 0x06;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x50;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x03;
			TxMsg.m_sWhichBit.m_aucData[3] = 0x00;
			TxMsg.m_sWhichBit.m_aucData[4] = 0x96;
			TxMsg.m_sWhichBit.m_aucData[5] = 0x17;
			TxMsg.m_sWhichBit.m_aucData[6] = 0x70;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			
			SendMsg(TxMsg);	
			//step 0 completed
			step_counter =1;
			sent_flag=1;
			break;
		
		case 1:
			
			//check message
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x02) || (RxMsg.m_sWhichBit.m_aucData[1]!=0x85) || (RxMsg.m_sWhichBit.m_aucData[2]!=0x02)){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			
			
			TxMsg.m_sWhichBit.m_aucData[0] = 0x02;
			TxMsg.m_sWhichBit.m_aucData[1] = 0xC5;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x02;
			TxMsg.m_sWhichBit.m_aucData[3] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			lock=1;
			ctr=3;		
			
			
			//step 1 completed
			step_counter =2;
			sent_flag=1;
		
			OnTimer_start_programming_50();
			break;
			
		case 2:
			
			//check message
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x03) || (RxMsg.m_sWhichBit.m_aucData[1]!=0x28) || (RxMsg.m_sWhichBit.m_aucData[2]!=0x03) || (RxMsg.m_sWhichBit.m_aucData[3]!=0x01)){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
		
			sent_flag=0;
			
			
			TxMsg.m_sWhichBit.m_aucData[0] = 0x02;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x68;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x03;
			TxMsg.m_sWhichBit.m_aucData[3] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			lock=1;
			ctr=2;
			step_counter =3;
			sent_flag=1;
			OnTimer_start_programming_50();
			break;
			
			
		case 3:
			
			//check message
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x02) || (RxMsg.m_sWhichBit.m_aucData[1]!=0x10) || (RxMsg.m_sWhichBit.m_aucData[2]!=0x02)){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			TxMsg.m_sWhichBit.m_aucData[0] = 0x06;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x50;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x02;
			TxMsg.m_sWhichBit.m_aucData[3] = 0x00;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xFA;
			TxMsg.m_sWhichBit.m_aucData[5] = 0x0B;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xB8;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			ctr=1;
			lock=1;
			step_counter =4;
			sent_flag=1;
			OnTimer_start_programming_50();
			break;
			
			
		case 4:
			
			//check message
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x02) || (RxMsg.m_sWhichBit.m_aucData[1]!=0x27) || (RxMsg.m_sWhichBit.m_aucData[2]!=0x01) ){
				return;
			}
		
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			
			TxMsg.m_sWhichBit.m_aucData[0] = 0x04;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x67;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x01;
			TxMsg.m_sWhichBit.m_aucData[3] = 0x11;
			TxMsg.m_sWhichBit.m_aucData[4] = 0x11;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			ctr=6;
			lock=1;
			step_counter =5;
			sent_flag=1;
			OnTimer_start_programming_50();
			break;
			
			
		case 5:
			
			//check message
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x04) || (RxMsg.m_sWhichBit.m_aucData[1]!=0x27) || (RxMsg.m_sWhichBit.m_aucData[2]!=0x02) || (RxMsg.m_sWhichBit.m_aucData[3]!=0x22)| (RxMsg.m_sWhichBit.m_aucData[4]!=0x22)){
				return;
			}
		
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			
			TxMsg.m_sWhichBit.m_aucData[0] = 0x02;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x67;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x02;
			TxMsg.m_sWhichBit.m_aucData[3] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			ctr=4;
			lock=1;
			step_counter =6;
			sent_flag=1;
			OnTimer_start_programming_50();
			break;
			
			
		case 6:
			
			//check message
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x04) || (RxMsg.m_sWhichBit.m_aucData[1]!=0x31) || (RxMsg.m_sWhichBit.m_aucData[2]!=0x01) || (RxMsg.m_sWhichBit.m_aucData[3]!=0xFF)|| (RxMsg.m_sWhichBit.m_aucData[4]!=0x00)){
				return;
			}
		
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			TxMsg.m_sWhichBit.m_aucData[0] = 0x03;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x7F;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x31;
			TxMsg.m_sWhichBit.m_aucData[3] = 0x78;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			ctr=1;
			lock=1;
			step_counter =7;
			sent_flag=1;
			OnTimer_start_programming_50();
			break;
			
			
		case 7:
			
			//check message
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x10) || (RxMsg.m_sWhichBit.m_aucData[1]!=0x09) || (RxMsg.m_sWhichBit.m_aucData[2]!=0x34) || (RxMsg.m_sWhichBit.m_aucData[3]!=0x00)){
				return;
			}
			if((RxMsg.m_sWhichBit.m_aucData[4]!=0x33) || (RxMsg.m_sWhichBit.m_aucData[5]!=0x00) || (RxMsg.m_sWhichBit.m_aucData[6]!=0x19) || (RxMsg.m_sWhichBit.m_aucData[7]!=0x68)){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			
			TxMsg.m_sWhichBit.m_aucData[0] = 0x30;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x01;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x00;
			TxMsg.m_sWhichBit.m_aucData[3] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			ctr=1;
			lock=1;
			step_counter =8;
			sent_flag=1;
			OnTimer_start_programming_50();
			break;
			
		case 8:
			
			//check message
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x21) || (RxMsg.m_sWhichBit.m_aucData[1]!=0x00) || (RxMsg.m_sWhichBit.m_aucData[2]!=0x01) || (RxMsg.m_sWhichBit.m_aucData[3]!=0xFF)){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			
			sent_flag=0;
			TxMsg.m_sWhichBit.m_aucData[0] = 0x04;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x74;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x20;
			TxMsg.m_sWhichBit.m_aucData[3] = 0x00;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xFF;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			ctr=3;
			lock=1;
			step_counter =9;
			sent_flag=1;
			OnTimer_start_programming_50();
			break;
		
		case 9:
			
			//check message
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x10) || (RxMsg.m_sWhichBit.m_aucData[1]!=0x37) || (RxMsg.m_sWhichBit.m_aucData[2]!=0x36) || (RxMsg.m_sWhichBit.m_aucData[3]!=0x01)){
				return;
			}
			if((RxMsg.m_sWhichBit.m_aucData[4]!=0x02) || (RxMsg.m_sWhichBit.m_aucData[5]!=0x03) || (RxMsg.m_sWhichBit.m_aucData[6]!=0x04) || (RxMsg.m_sWhichBit.m_aucData[7]!=0x05)){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			
			TxMsg.m_sWhichBit.m_aucData[0] = 0x30;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x01;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x00;
			TxMsg.m_sWhichBit.m_aucData[3] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			ctr=1;
			lock=1;
			step_counter =10;
			sent_flag=1;
			OnTimer_start_programming_50();
			break;
			
			
		case 10:
			
			//check sequence number
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x21) ){
				return;
			} 
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			
			TxMsg.m_sWhichBit.m_aucData[0] = 0x30;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x01;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x00;
			TxMsg.m_sWhichBit.m_aucData[3] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			ctr=2;
			lock=1;
			step_counter =11;
			sent_flag=1;
			OnTimer_start_programming_50();
			break;
			
		case 11:
			
			//check sequence number
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x22) ){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			TxMsg.m_sWhichBit.m_aucData[0] = 0x30;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x02;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x00;
			TxMsg.m_sWhichBit.m_aucData[3] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			ctr=1;
			lock=1;
			step_counter =12;
			sent_flag=1;
			OnTimer_start_programming_50();
			break;
			
		case 12:
			
			//check sequence number
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x23) ){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			step_counter =13;
			sent_flag=1;
			break;
		
		case 13:
			
			//check sequence number
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x24) ){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			TxMsg.m_sWhichBit.m_aucData[0] = 0x30;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x00;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x00;
			TxMsg.m_sWhichBit.m_aucData[3] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			ctr=1;
			lock=1;
			step_counter =14;
			sent_flag=1;
			OnTimer_start_programming_50();
			break;
			
		case 14:
			
			//check sequence number
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x25) ){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			sent_flag=1;
			step_counter =15;
			break;
			
			
		case 15:
			
			//check sequence number
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x26) ){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			sent_flag=1;
			step_counter =16;
			break;
			
			
		case 16:
			
			//check sequence number
			if((RxMsg.m_sWhichBit.m_aucData[0]!=0x27) ){
				return;
			}
			if(RxMsg.m_unMsgID != 0x7E1){
			return;
			}
			sent_flag=0;
			TxMsg.m_sWhichBit.m_aucData[0] = 0x02;
			TxMsg.m_sWhichBit.m_aucData[1] = 0x76;
			TxMsg.m_sWhichBit.m_aucData[2] = 0x01;
			TxMsg.m_sWhichBit.m_aucData[3] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[4] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[5] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[6] = 0xAA;
			TxMsg.m_sWhichBit.m_aucData[7] = 0xAA;
			SendMsg(TxMsg);
			step_counter = 17;
			Trace("SUCCESS"); //if this part of the code is executed, it means that the replay was success full
			break;
		
		default:
			break;
	
	}
}/* End BUSMASTER generated function - OnMsgID_7E0 */